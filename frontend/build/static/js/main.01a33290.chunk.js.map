{"version":3,"sources":["hoc/Aux/Aux.js","components/TestItems/TestItem/TestItem.js","components/TestItems/TestItems.js","components/TestExecutionTable/TestExecutionTable.js","axios-api.js","components/TestItemDetails/TestItemDetails.js","components/AddNewRequest/AddNewRequest.js","containers/IONOSTestExecutor/IONOSTestExecutor.js","App.js","serviceWorker.js","index.js"],"names":["aux","props","children","TestItem","className","this","status","ID","requestedBy","createdAt","env_name","path","href","onClick","click","Component","items","map","item","id","created_at","requested_by","displayPath","clicked","bind","TestExecutionTable","tests","TestItems","viewItemDetails","aria-label","instance","axios","create","baseURL","TestItemDetails","currentItem","Aux","backClicked","logs","AddNewRequest","onSubmit","submitTest","type","name","placeholder","value","requester","onChange","requesterChanged","requesterError","env","envChanged","defaultValue","assets","test_envs","i","envError","multiple","testPath","testPathChanged","available_paths","testPathError","accept","fileUploadChanged","fileWarnings","warn","fileErrors","err","disabled","length","file","IONOSTestExecutor","state","error","detailsView","itemID","interval","getAssets","get","then","response","setState","data","catch","getDisplayPath","val","some","refreshList","e","preventDefault","post","target","reset","itemId","backToListItems","handleTestPathChanged","options","l","selected","push","handleFileUploadChanged","files","fileName","startsWith","size","checkDuplicateFileNamesCount","filter","split","indexOf","join","reader","FileReader","onload","event","result","readAsDataURL","setInterval","clearInterval","toString","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.01a33290.chunk.js","sourcesContent":["const aux = (props) => props.children;\nexport default aux;","import React, {Component}  from 'react';\n\nclass TestItem extends Component {\n\n  render(){\n     let className = \"failed\";\n     if (this.props.status === \"SUCCESS\") {\n         className = 'succeed'\n     } else if (this.props.status === \"RUNNING\" || this.props.status === \"CREATED\") {\n         className = 'running'\n     }\n    return (\n        <tr className={className}>\n            <td>{this.props.ID}</td>\n            <td>{this.props.requestedBy}</td>\n            <td>{this.props.createdAt}</td>\n            <td>{this.props.env_name}</td>\n            <td>{this.props.path}</td>\n            <td>{this.props.status}</td>\n            <td><a href=\"#\" onClick={this.props.click}>View Details</a></td>\n        </tr>\n    );\n  }\n}\n\nexport default TestItem;","import React from 'react';\nimport TestItem from './TestItem/TestItem';\n\nconst items = (props) => (\n  props.items.map((item) => {\n    return (\n        <TestItem\n            key={item.id}\n            ID={item.id}\n            createdAt={item.created_at}\n            env_name={item.env_name}\n            requestedBy={item.requested_by}\n            status={item.status}\n            path={item.displayPath}\n            click={props.clicked.bind(this, item.id)}\n        />\n    );\n  })\n);\n\nexport default items;","import React, {Component}  from 'react';\nimport TestItems from \"../TestItems/TestItems\";\n\nclass TestExecutionTable extends Component {\n\n  render(){\n     const tests = <TestItems items={this.props.items} clicked={this.props.viewItemDetails}/>\n    return (\n        <div className=\"row\">\n            <div className=\"col-md-12\">\n              <fieldset>\n                <legend>Test execution requests</legend>\n                <div className=\"table-responsive\">\n                  <table className=\"table table-striped\">\n                    <thead>\n                    <tr>\n                      <th>Request ID</th>\n                      <th>Requested By</th>\n                      <th>Created At</th>\n                      <th>Test Env</th>\n                      <th>Test Path</th>\n                      <th>Status</th>\n                      <th>Details</th>\n                    </tr>\n                    </thead>\n                    <tbody aria-label='textExecution-table'>\n                    {tests}\n                    </tbody>\n                  </table>\n                </div>\n              </fieldset>\n            </div>\n          </div>\n    );\n  }\n}\n\nexport default TestExecutionTable;","import axios from 'axios'\n\nconst instance = axios.create({\n  baseURL: 'http://127.0.0.1:8081/api/v1/',\n});\n\nexport default instance;\n","import React, {Component}  from 'react';\nimport Aux from \"../../hoc/Aux/Aux\";\n\nclass TestItemDetails extends Component {\n\n\n  render(){\n      let className = \"failed\";\n     if (this.props.currentItem.status === \"SUCCESS\") {\n         className = 'succeed'\n     } else if (this.props.currentItem.status === \"RUNNING\" || this.props.currentItem.status === \"CREATED\") {\n         className = 'running'\n     }\n    return (\n        <Aux>\n            <div className=\"row\">\n              <div className=\"col-md-12\">\n                <a className=\"btn btn-primary float-right\" href=\"#\" onClick={this.props.backClicked.bind(this)}>Back</a>\n              </div>\n            </div>\n            <div className=\"row\">\n              <div className=\"col-md-12\">\n                <fieldset>\n                  <legend>Test details</legend>\n                  <div className=\"table-responsive\">\n                    <table className=\"table table-striped\">\n                      <tbody>\n                      <tr>\n                        <td className=\"title\">ID</td>\n                        <td>{this.props.currentItem.id}</td>\n                      </tr>\n                      <tr>\n                        <td className=\"title\">Requested by</td>\n                        <td>{this.props.currentItem.requested_by}</td>\n                      </tr>\n                      <tr>\n                        <td className=\"title\">Env</td>\n                        <td>{this.props.currentItem.env_name}</td>\n                      </tr>\n                      <tr>\n                        <td className=\"title\">Path</td>\n                        <td>{this.props.currentItem.displayPath}</td>\n                      </tr>\n                      <tr className={className}>\n                        <td className=\"title\">Status</td>\n                        <td>{this.props.currentItem.status}</td>\n                      </tr>\n                      <tr>\n                        <td className=\"title\">Logs</td>\n                        <td>\n                    <pre><code className=\"python\">\n                      {this.props.currentItem.logs}\n                      </code></pre>\n                        </td>\n                      </tr>\n                      </tbody>\n                    </table>\n                  </div>\n                </fieldset>\n              </div>\n            </div>\n        </Aux>\n    );\n  }\n}\n\nexport default TestItemDetails;","import React, {Component}  from 'react';\n\nclass AddNewRequest extends Component {\n\n  render(){\n\n    return (\n        <div className=\"row\">\n            <div className=\"col-md-12\">\n              <fieldset>\n                <legend>New request</legend>\n                <form onSubmit={this.props.submitTest.bind(this)}>\n                  <div className=\"row\">\n                    <div className=\"col-md-2 form-group\">\n                      <input type=\"text\" className=\"form-control\" aria-label=\"requester-input\" name=\"requester\" id=\"requester\"\n                             placeholder=\"Requester\" value={this.props.requester} onChange={this.props.requesterChanged.bind(this)}/>\n                             <p className=\"error-message\">{this.props.requesterError}</p>\n                    </div>\n                    <div className=\"col-md-2 form-group\">\n                      <select className=\"form-control\" aria-label=\"env-input\" name=\"env_id\" id=\"env_id\" placeholder=\"Environment ID\"\n                              value={this.props.env}  onChange={this.props.envChanged.bind(this)}>\n                        <option value=\"\" defaultValue/>\n                        {this.props.assets.test_envs.map((item,i) => <option value={item.id} aria-label={`env#${i}`} key={item.id} >{item.name}</option>)}\n                      </select>\n                             <p className=\"error-message\">{this.props.envError}</p>\n                    </div>\n                    <div className=\"col-md-4 form-group\">\n                      <select className=\"form-control\" aria-label=\"testPath-input\" name=\"test_path\" id=\"test_path\" multiple\n                             placeholder=\"Test Path\" value={this.props.testPath}  onChange={this.props.testPathChanged.bind(this)}>\n                        <option value=\"\" defaultValue/>\n                        {this.props.assets.available_paths.map((item,i) => <option value={item.id} aria-label={`path#${i}`}  key={item.id}>{item.path}</option>)}\n                      </select>\n                             <p className=\"error-message\">{this.props.testPathError}</p>\n                      <label aria-label=\"file-input\">Upload Test File:</label>\n                      <input type=\"file\" className=\"form-control-file\" accept='.py' onChange={this.props.fileUploadChanged.bind(this)}/>\n                      {this.props.fileWarnings.map(warn=>(<p className=\"warning-message\">{warn}</p>))}\n                      {this.props.fileErrors.map(err=>(<p className=\"error-message\">{err}</p>))}\n                      </div>\n                    <div className=\"col-md-2\">\n                      <input type=\"submit\" aria-label=\"submit-input\"  value=\"Submit\" className=\"btn btn-primary\" disabled={(!this.props.testPath.length && !this.props.file) || this.props.requester === '' || this.props.env === ''}/>\n                    </div>\n                  </div>\n                </form>\n              </fieldset>\n            </div>\n          </div>\n    );\n  }\n}\n\nexport default AddNewRequest;","import React, {Component} from 'react';\n\nimport Aux from '../../hoc/Aux/Aux';\nimport TestExecutionTable from './../../components/TestExecutionTable/TestExecutionTable';\n\nimport axios from './../../axios-api'\nimport TestItemDetails from \"../../components/TestItemDetails/TestItemDetails\";\nimport AddNewRequest from \"../../components/AddNewRequest/AddNewRequest\";\n\n\nclass IONOSTestExecutor extends Component {\n    state = {\n        assets: {test_envs: [], available_paths: []},\n        error: false,\n        items: [],\n        detailsView: false,\n        itemID: null,\n        currentItem: {},\n        requesterError: '',\n        envError: '',\n        testPathError: '',\n        requester: '',\n        env: '',\n        testPath: [],\n        file: null,\n        fileErrors: [],\n        fileWarnings: [],\n    };\n\n    interval = null\n\n    componentDidMount() {\n        this.getAssets()\n        this.interval = setInterval(this.refreshList, 1000);\n        this.refreshList()\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n\n    getAssets = () => {\n        axios.get('assets').then(response => {\n            this.setState({assets: response.data})\n        }).catch(error => {\n            this.setState({error: true})\n        })\n    }\n\n    getDisplayPath = (path) => {\n        let val = '';\n        this.state.assets.available_paths.map(item => {\n            if (path.some(i => i === item.id)) {\n                val += item.path + ' '\n            }\n        })\n        return val;\n    }\n\n    refreshList = () => {\n        axios.get('test-run').then(response => {\n            let data = response.data;\n            this.setState({\n                items: data.map(item => {\n                    return {displayPath: this.getDisplayPath(item.path), ...item}\n                })\n            })\n        }).catch(error => {\n            this.setState({error: true})\n        })\n        if (this.state.itemID !== null) {\n            this.viewItemDetails(this.state.itemID)\n        }\n    }\n\n    submitTest = (e) => {\n        e.preventDefault();\n        axios.post('test-run', {\n            requested_by: this.state.requester,\n            env: this.state.env,\n            path: this.state.testPath,\n            file: this.state.file\n        }).then(response => {\n            e.target.reset();\n\n            /* update test paths with the uploaded file*/\n            if (this.state.file) {\n                this.getAssets();\n            }\n\n            this.setState({\n                requester: '', env: '', testPath: [], file: null, fileWarnings: [], fileErrors: [],\n                requesterError: '', envError: '', testPathError: ''\n            })\n            this.refreshList()\n        }).catch(error => {\n            this.setState({\n                requesterError: error.response.data.requested_by ?? '',\n                envError: error.response.data.env ?? '',\n                testPathError: error.response.data.path ?? '',\n            })\n        })\n    }\n\n    viewItemDetails = (itemId) => {\n        axios.get('test-run/' + itemId).then(response => {\n            let data = response.data\n            data.displayPath = this.getDisplayPath(response.data.path)\n            this.setState({currentItem: data})\n        }).catch(error => {\n            this.setState({error: true})\n        })\n        this.setState({\n            detailsView: true,\n            itemID: itemId\n        })\n    };\n\n    backToListItems = () => {\n        this.setState({\n            detailsView: false,\n            itemID: null\n        })\n    };\n\n    handleTestPathChanged = (e) => {\n        let options = e.target.options;\n        let value = [];\n        for (let i = 0, l = options.length; i < l; i++) {\n            if (options[i].selected) {\n                value.push(options[i].value);\n            }\n        }\n        this.setState({testPath: value});\n    }\n\n    handleFileUploadChanged = (e) => {\n        /* reset errors and warnings from potentially previous input*/\n        this.setState({fileErrors: [], fileWarnings: []});\n\n        let file = e.target.files[0];\n        let fileName = file.name\n\n        /* dummy validation: file name must start with 'test' */\n        if (!fileName.startsWith('test')) {\n            this.setState({fileErrors: [...this.state.fileErrors, \"File name must start with the world 'test'\"]});\n            return false;\n        }\n\n        /* dummy validation: file size limitation */\n        if (file.size > 5000) {\n            this.setState({fileErrors: [...this.state.fileErrors, \"Please upload a file smaller than 5 MB\"]});\n            return false;\n        }\n        /* check name duplication: file name already exists */\n        const checkDuplicateFileNamesCount = this.state.assets.available_paths.filter(item => item.path.split('/')[1].indexOf(fileName.split('.')[0]) > -1).length;\n        if (checkDuplicateFileNamesCount) {\n            fileName = [[fileName.split('.')[0], checkDuplicateFileNamesCount].join('_'), fileName.split('.')[1]].join('.');\n            this.setState({fileWarnings: [...this.state.fileWarnings, \"file already exists. a new name will be assigned: \" + fileName]});\n        }\n\n        let reader = new FileReader();\n        reader.onload = (function (event) {\n            this.setState({file: {name: fileName, data: event.target.result.split(',')[1]}});\n        }).bind(this);\n        reader.readAsDataURL(file);\n    }\n\n    render() {\n        if (this.state.detailsView) {\n            return (\n                <TestItemDetails currentItem={this.state.currentItem} backClicked={this.backToListItems}/>\n            )\n        }\n        return (\n            <Aux>\n                <AddNewRequest\n                    requester={this.state.requester}\n                    requesterError={this.state.requesterError}\n                    env={this.state.env}\n                    envError={this.state.envError}\n                    testPath={this.state.testPath}\n                    testPathError={this.state.testPathError}\n                    fileErrors={this.state.fileErrors}\n                    fileWarnings={this.state.fileWarnings}\n                    assets={this.state.assets}\n                    file={this.state.file}\n\n                    requesterChanged={e => this.setState({requester: e.target.value?.toString()})}\n                    envChanged={e => this.setState({env: e.target.value?.toString()})}\n                    testPathChanged={this.handleTestPathChanged}\n                    fileUploadChanged={this.handleFileUploadChanged}\n                    submitTest={this.submitTest}\n                />\n                <TestExecutionTable items={this.state.items} viewItemDetails={this.viewItemDetails}/>\n            </Aux>\n        )\n    }\n}\n\nexport default IONOSTestExecutor;","import React from 'react';\nimport IONOSTestExecutor from \"./containers/IONOSTestExecutor/IONOSTestExecutor\";\n\nfunction App() {\n  return (\n\n      <div>\n          <IONOSTestExecutor></IONOSTestExecutor>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}